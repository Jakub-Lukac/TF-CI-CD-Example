name: Terraform CI/CD Example

on:
  workflow_dispatch:
    inputs:
      customer:
        description: Choose customer workspace
        required: true
        default: "softip"
        type: choice # creates drop down menu
        options: ["softip", "slsp", "curium"] # check if it can be lower case or upper case

env:
  TERRAFORM_WORKING_DIRECTORY: src/terraform

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Permissions for OIDC
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.5
          terraform_wrapper: false

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Initialize Terraform
        env:
          BACKEND_RESOURCE_GROUP_NAME: ${{secrets.BACKEND_RESOURCE_GROUP_NAME}}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{secrets.BACKEND_STORAGE_ACCOUNT_NAME}}
          BACKEND_STORAGE_CONTAINER_NAME: ${{secrets.BACKEND_STORAGE_CONTAINER_NAME}}
          TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
          BACKEND_ACCESS_KEY: ${{ secrets.BACKEND_ACCESS_KEY }}
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
          -backend-config="key=$TF_BACKEND_KEY" \
          -backend-config="access_key"=$BACKEND_ACCESS_KEY

      - name: Terraform Validate
        # ensures that terraform validate runs regardless of the success or failure of the previous step
        if: success() || failure()
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terraform validate

      - name: Initialize Terraform Workspace
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          set +e  # Disable exit on error temporarily
          terraform workspace select ${{github.event.inputs.customer}} || terraform workspace new ${{github.event.inputs.customer}}
          workspace_name=$(terraform workspace show)
          echo "Current workspace: $workspace_name"
          set -e  # Re-enable exit on error

      - name: Generate and Use .tfvars File
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        # secrets.TFVARS_CONTENT contains local customer.tfvars file, which is gitignored
        run: |
          customer_secret="secrets.${{ github.event.inputs.customer }}_TFVARS_CONTENT"
          secret_value=$(echo "${customer_secret}" | base64 -d)
          echo "$secret_value" > terraform.tfvars

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform plan -out="plan_${{ github.event.inputs.customer }}.out" -var-file="terraform.tfvars"

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          terraform apply "plan_${{ github.event.inputs.customer }}.out"
